<?php return array (
  'unique_key' => 'name',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'PluginEvents' => 
    array (
      '9f4324ff8f7a770e4aa53d7e47004d60' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnMODXInit","priority":0,"propertyset":0}',
        'guid' => 'bc9d2bac8c5799da5e320218c5fbeab9',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnMODXInit',
        ),
        'signature' => '9eda2b76f22422f95eefec7830d4a043',
      ),
      'ba9992bb3f0806e8b4951a16659a36ca' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnHandleRequest","priority":1,"propertyset":0}',
        'guid' => 'f55616186d3b29b05beb4666594252e9',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnHandleRequest',
        ),
        'signature' => 'a5c103f636b0f822bce753947208e8b1',
      ),
      '0868e7465baae08db3ea0fc8cdf88911' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"pdoToolsOnFenomInit","priority":0,"propertyset":0}',
        'guid' => '1c9564d611a19ce3312f6c9b865db13d',
        'native_key' => 
        array (
          0 => 0,
          1 => 'pdoToolsOnFenomInit',
        ),
        'signature' => 'de3121dd7dcde6bba6cd8359c585e72f',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'PluginEvents' => 
    array (
      'preserve_keys' => true,
      'update_object' => false,
      'unique_key' => 
      array (
        0 => 'pluginid',
        1 => 'event',
      ),
    ),
  ),
  'namespace' => 'clientconfig',
  'resolve' => NULL,
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '44e57010ba63ced432d0b9f4097df24d',
  'package' => 'modx',
  'class' => 'modPlugin',
  'signature' => '67bcd2f4c57fe044d401880254a4ac03',
  'native_key' => 1,
  'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"ClientConfig","description":"Sets system settings from the Client Config CMP.","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\n * ClientConfig\\n *\\n * Copyright 2011-2014 by Mark Hamstra <hello@markhamstra.com>\\n *\\n * ClientConfig is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * ClientConfig is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * ClientConfig; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package clientconfig\\n *\\n * @var modX $modx\\n * @var int $id\\n * @var string $mode\\n * @var modResource $resource\\n * @var modTemplate $template\\n * @var modTemplateVar $tv\\n * @var modChunk $chunk\\n * @var modSnippet $snippet\\n * @var modPlugin $plugin\\n*\\/\\n\\n$eventName = $modx->event->name;\\n\\nswitch($eventName) {\\n    case \'OnMODXInit\':\\n    case \'OnHandleRequest\':\\n    case \'pdoToolsOnFenomInit\':\\n        \\/* Grab the class *\\/\\n        $path = $modx->getOption(\'clientconfig.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/clientconfig\\/\');\\n        $path .= \'model\\/clientconfig\\/\';\\n        $clientConfig = $modx->getService(\'clientconfig\',\'ClientConfig\', $path);\\n\\n        \\/* If we got the class (gotta be careful of failed migrations), grab settings and go! *\\/\\n        if ($clientConfig instanceof ClientConfig) {\\n            $contextKey = $modx->context instanceof modContext || $modx->context instanceof \\\\MODX\\\\Revolution\\\\modContext\\n                ? $modx->context->get(\'key\') : \'web\';\\n            $settings = $clientConfig->getSettings($contextKey);\\n\\n            \\/* Make settings available as [[++tags]] *\\/\\n            $modx->setPlaceholders($settings, \'+\');\\n\\n            \\/* Make settings available for $modx->getOption() *\\/\\n            foreach ($settings as $key => $value) {\\n                $modx->setOption($key, $value);\\n            }\\n        }\\n        break;\\n}\\n\\nreturn;","locked":0,"properties":null,"disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * ClientConfig\\n *\\n * Copyright 2011-2014 by Mark Hamstra <hello@markhamstra.com>\\n *\\n * ClientConfig is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * ClientConfig is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * ClientConfig; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package clientconfig\\n *\\n * @var modX $modx\\n * @var int $id\\n * @var string $mode\\n * @var modResource $resource\\n * @var modTemplate $template\\n * @var modTemplateVar $tv\\n * @var modChunk $chunk\\n * @var modSnippet $snippet\\n * @var modPlugin $plugin\\n*\\/\\n\\n$eventName = $modx->event->name;\\n\\nswitch($eventName) {\\n    case \'OnMODXInit\':\\n    case \'OnHandleRequest\':\\n    case \'pdoToolsOnFenomInit\':\\n        \\/* Grab the class *\\/\\n        $path = $modx->getOption(\'clientconfig.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/clientconfig\\/\');\\n        $path .= \'model\\/clientconfig\\/\';\\n        $clientConfig = $modx->getService(\'clientconfig\',\'ClientConfig\', $path);\\n\\n        \\/* If we got the class (gotta be careful of failed migrations), grab settings and go! *\\/\\n        if ($clientConfig instanceof ClientConfig) {\\n            $contextKey = $modx->context instanceof modContext || $modx->context instanceof \\\\MODX\\\\Revolution\\\\modContext\\n                ? $modx->context->get(\'key\') : \'web\';\\n            $settings = $clientConfig->getSettings($contextKey);\\n\\n            \\/* Make settings available as [[++tags]] *\\/\\n            $modx->setPlaceholders($settings, \'+\');\\n\\n            \\/* Make settings available for $modx->getOption() *\\/\\n            foreach ($settings as $key => $value) {\\n                $modx->setOption($key, $value);\\n            }\\n        }\\n        break;\\n}\\n\\nreturn;"}',
);