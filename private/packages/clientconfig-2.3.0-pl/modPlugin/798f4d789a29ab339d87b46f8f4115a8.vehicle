<?php return array (
  'unique_key' => 'name',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'PluginEvents' => 
    array (
      '4e70a5dfa576c96c5abea3ef2a3a775a' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnMODXInit","priority":0,"propertyset":0}',
        'guid' => '29d540db6e01dd061573c35490d7588a',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnMODXInit',
        ),
        'signature' => 'd34b9fc1bb151d53f57f72d7dbf6f6a1',
      ),
      '5ee314b613d985e559b4613f1b2ee8d4' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnHandleRequest","priority":0,"propertyset":0}',
        'guid' => '837d186e659339f7961748aeb469ca6c',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnHandleRequest',
        ),
        'signature' => '47d2f55e04bcdb7be872e0644d41c7a8',
      ),
      '1a24294d62b28bf9ddedaf63ed16684c' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"pdoToolsOnFenomInit","priority":0,"propertyset":0}',
        'guid' => 'a7e5c433b8aba117419d4370af2f2a49',
        'native_key' => 
        array (
          0 => 0,
          1 => 'pdoToolsOnFenomInit',
        ),
        'signature' => '5d5cf5bb97ff41ae4bb89a025b2ab73d',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'PluginEvents' => 
    array (
      'preserve_keys' => true,
      'update_object' => false,
      'unique_key' => 
      array (
        0 => 'pluginid',
        1 => 'event',
      ),
    ),
  ),
  'namespace' => 'clientconfig',
  'resolve' => NULL,
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '052c5d908b6224426443c4b7d5296ed7',
  'package' => 'modx',
  'class' => 'modPlugin',
  'signature' => '798f4d789a29ab339d87b46f8f4115a8',
  'native_key' => 1,
  'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"ClientConfig","description":"Sets system settings from the Client Config CMP.","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\n * ClientConfig\\n *\\n * Copyright 2011-2014 by Mark Hamstra <hello@markhamstra.com>\\n *\\n * ClientConfig is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * ClientConfig is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * ClientConfig; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package clientconfig\\n *\\n * @var modX $modx\\n * @var int $id\\n * @var string $mode\\n * @var modResource $resource\\n * @var modTemplate $template\\n * @var modTemplateVar $tv\\n * @var modChunk $chunk\\n * @var modSnippet $snippet\\n * @var modPlugin $plugin\\n*\\/\\n\\n$eventName = $modx->event->name;\\n\\nswitch($eventName) {\\n    case \'OnMODXInit\':\\n    case \'OnHandleRequest\':\\n    case \'pdoToolsOnFenomInit\':\\n        \\/* Grab the class *\\/\\n        $path = $modx->getOption(\'clientconfig.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/clientconfig\\/\');\\n        $path .= \'model\\/clientconfig\\/\';\\n        $clientConfig = $modx->getService(\'clientconfig\',\'ClientConfig\', $path);\\n\\n        \\/* If we got the class (gotta be careful of failed migrations), grab settings and go! *\\/\\n        if ($clientConfig instanceof ClientConfig) {\\n            $contextKey = $modx->context instanceof modContext ? $modx->context->get(\'key\') : \'web\';\\n            $settings = $clientConfig->getSettings($contextKey);\\n\\n            \\/* Make settings available as [[++tags]] *\\/\\n            $modx->setPlaceholders($settings, \'+\');\\n\\n            \\/* Make settings available for $modx->getOption() *\\/\\n            foreach ($settings as $key => $value) {\\n                $modx->setOption($key, $value);\\n            }\\n        }\\n        break;\\n}\\n\\nreturn;","locked":0,"properties":null,"disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * ClientConfig\\n *\\n * Copyright 2011-2014 by Mark Hamstra <hello@markhamstra.com>\\n *\\n * ClientConfig is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * ClientConfig is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * ClientConfig; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package clientconfig\\n *\\n * @var modX $modx\\n * @var int $id\\n * @var string $mode\\n * @var modResource $resource\\n * @var modTemplate $template\\n * @var modTemplateVar $tv\\n * @var modChunk $chunk\\n * @var modSnippet $snippet\\n * @var modPlugin $plugin\\n*\\/\\n\\n$eventName = $modx->event->name;\\n\\nswitch($eventName) {\\n    case \'OnMODXInit\':\\n    case \'OnHandleRequest\':\\n    case \'pdoToolsOnFenomInit\':\\n        \\/* Grab the class *\\/\\n        $path = $modx->getOption(\'clientconfig.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/clientconfig\\/\');\\n        $path .= \'model\\/clientconfig\\/\';\\n        $clientConfig = $modx->getService(\'clientconfig\',\'ClientConfig\', $path);\\n\\n        \\/* If we got the class (gotta be careful of failed migrations), grab settings and go! *\\/\\n        if ($clientConfig instanceof ClientConfig) {\\n            $contextKey = $modx->context instanceof modContext ? $modx->context->get(\'key\') : \'web\';\\n            $settings = $clientConfig->getSettings($contextKey);\\n\\n            \\/* Make settings available as [[++tags]] *\\/\\n            $modx->setPlaceholders($settings, \'+\');\\n\\n            \\/* Make settings available for $modx->getOption() *\\/\\n            foreach ($settings as $key => $value) {\\n                $modx->setOption($key, $value);\\n            }\\n        }\\n        break;\\n}\\n\\nreturn;"}',
);